import { Document, Packer, Paragraph, TextRun, UnderlineType } from 'docx';
import { Analysis, Product, ScoreCalculation, PollResult } from './types';

// Helper functions for detailed competitive analysis
function calculatePriceGaps(prices: number[]): Array<{description: string, gap: number}> {
  const sortedPrices = [...prices].sort((a, b) => a - b);
  const gaps = [];
  
  for (let i = 0; i < sortedPrices.length - 1; i++) {
    const gap = sortedPrices[i + 1] - sortedPrices[i];
    if (gap > 0) {
      gaps.push({
        description: `$${sortedPrices[i].toFixed(2)} to $${sortedPrices[i + 1].toFixed(2)} (Gap: $${gap.toFixed(2)})`,
        gap
      });
    }
  }
  
  return gaps;
}

function calculateRatingGaps(ratings: number[]): Array<{description: string, gap: number}> {
  const sortedRatings = [...ratings].sort((a, b) => a - b);
  const gaps = [];
  
  for (let i = 0; i < sortedRatings.length - 1; i++) {
    const gap = sortedRatings[i + 1] - sortedRatings[i];
    if (gap > 0.1) { // Only significant gaps
      gaps.push({
        description: `${sortedRatings[i].toFixed(1)} to ${sortedRatings[i + 1].toFixed(1)} stars (Gap: ${gap.toFixed(1)} stars)`,
        gap
      });
    }
  }
  
  return gaps;
}

function calculateShippingGaps(shippingDays: number[]): Array<{description: string, gap: number}> {
  const sortedShipping = [...shippingDays].sort((a, b) => a - b);
  const gaps = [];
  
  for (let i = 0; i < sortedShipping.length - 1; i++) {
    const gap = sortedShipping[i + 1] - sortedShipping[i];
    if (gap > 0) {
      gaps.push({
        description: `${sortedShipping[i]} to ${sortedShipping[i + 1]} days (Gap: ${gap} days)`,
        gap
      });
    }
  }
  
  return gaps;
}

function calculateReviewGaps(reviewCounts: number[]): Array<{description: string, gap: number}> {
  const sortedReviews = [...reviewCounts].sort((a, b) => a - b);
  const gaps = [];
  
  for (let i = 0; i < sortedReviews.length - 1; i++) {
    const gap = sortedReviews[i + 1] - sortedReviews[i];
    if (gap > 100) { // Only significant gaps
      gaps.push({
        description: `${sortedReviews[i].toLocaleString()} to ${sortedReviews[i + 1].toLocaleString()} reviews (Gap: ${gap.toLocaleString()})`,
        gap
      });
    }
  }
  
  return gaps;
}

function calculateScoreGaps(calculations: ScoreCalculation[]): Array<{description: string, gap: number}> {
  const sortedScores = [...calculations].sort((a, b) => b.totalScore - a.totalScore);
  const gaps = [];
  
  for (let i = 0; i < sortedScores.length - 1; i++) {
    const gap = sortedScores[i].totalScore - sortedScores[i + 1].totalScore;
    if (gap > 5) { // Only significant gaps
      gaps.push({
        description: `${sortedScores[i].totalScore} to ${sortedScores[i + 1].totalScore} points (Gap: ${gap} points)`,
        gap
      });
    }
  }
  
  return gaps;
}

function identifyCompetitiveWeaknesses(sortedProducts: any[], _pollResults: any): Array<{category: string, description: string, impact: string}> {
  const weaknesses = [];
  const bottomProduct = sortedProducts[sortedProducts.length - 1];
  
  // Price weaknesses
  if (bottomProduct.product.price > sortedProducts[0].product.price) {
    weaknesses.push({
      category: 'Pricing',
      description: `Overpriced by $${(bottomProduct.product.price - sortedProducts[0].product.price).toFixed(2)} vs market leader`,
      impact: 'High'
    });
  }
  
  // Rating weaknesses
  if (bottomProduct.product.rating < 4.0) {
    weaknesses.push({
      category: 'Customer Satisfaction',
      description: `Low rating of ${bottomProduct.product.rating}/5 stars indicates quality issues`,
      impact: 'Critical'
    });
  }
  
  // Shipping weaknesses
  if (bottomProduct.product.shippingDays > sortedProducts[0].product.shippingDays + 2) {
    weaknesses.push({
      category: 'Shipping',
      description: `Slow shipping: ${bottomProduct.product.shippingDays} days vs ${sortedProducts[0].product.shippingDays} days for leader`,
      impact: 'Medium'
    });
  }
  
  // Review weaknesses
  if (bottomProduct.product.reviewCount < 100) {
    weaknesses.push({
      category: 'Social Proof',
      description: `Low review count: ${bottomProduct.product.reviewCount} reviews vs market average`,
      impact: 'High'
    });
  }
  
  return weaknesses;
}

function identifyMarketOpportunities(sortedProducts: any[], priceGaps: any[], ratingGaps: any[], shippingGaps: any[]): Array<{type: string, description: string, potential: string}> {
  const opportunities = [];
  
  // Price opportunities
  if (priceGaps.length > 0) {
    const largestPriceGap = priceGaps.reduce((max, gap) => gap.gap > max.gap ? gap : max);
    opportunities.push({
      type: 'Pricing',
      description: `Price gap of $${largestPriceGap.gap.toFixed(2)} between competitors`,
      potential: 'High'
    });
  }
  
  // Rating opportunities
  if (ratingGaps.length > 0) {
    const largestRatingGap = ratingGaps.reduce((max, gap) => gap.gap > max.gap ? gap : max);
    opportunities.push({
      type: 'Quality',
      description: `Rating gap of ${largestRatingGap.gap.toFixed(1)} stars indicates quality improvement opportunity`,
      potential: 'High'
    });
  }
  
  // Shipping opportunities
  if (shippingGaps.length > 0) {
    const largestShippingGap = shippingGaps.reduce((max, gap) => gap.gap > max.gap ? gap : max);
    opportunities.push({
      type: 'Delivery',
      description: `Shipping gap of ${largestShippingGap.gap} days indicates faster delivery opportunity`,
      potential: 'Medium'
    });
  }
  
  return opportunities;
}

/**
 * Generate competitive analysis and market opportunities document for Core 5
 */
export async function generateCore5AnalysisReport(
  analysis: Analysis
): Promise<ArrayBuffer> {
  console.log('Core 5 analysis generator called with:', {
    type: analysis.type,
    productsCount: analysis.products?.length,
    calculationsCount: analysis.calculations?.length,
    pollResultsCount: Object.keys(analysis.pollResults || {}).length
  });

  if (analysis.type !== 'core5') {
    throw new Error('Core 5 analysis reports are only available for Core 5 analysis');
  }
  
  const { products, calculations, pollResults } = analysis;
  
  if (products.length === 0) {
    throw new Error('No products found in Core 5 analysis');
  }
  
  if (!calculations || calculations.length === 0) {
    throw new Error('No calculations found in Core 5 analysis');
  }
  
  // Generate market opportunity analysis
  let marketAnalysis;
  try {
    marketAnalysis = await generateMarketOpportunityAnalysis(analysis, pollResults);
  } catch (error) {
    console.error('Market analysis generation failed, using fallback:', error);
    marketAnalysis = "Market opportunity analysis could not be generated at this time. Please try again later.";
  }
  
  const doc = new Document({
    sections: [
      {
        properties: {},
        children: [
          // Header Section
          new Paragraph({
            children: [
              new TextRun({
                text: `Competitive Analysis & Market Opportunities`,
                bold: true,
                size: 32
              })
            ],
            spacing: { after: 400 }
          }),
          
          new Paragraph({
            children: [
              new TextRun({
                text: `Date: ${new Date().toLocaleDateString('en-US', {
                  month: 'long',
                  day: 'numeric',
                  year: 'numeric'
                })}`
              })
            ],
            spacing: { after: 300 }
          }),
          
          new Paragraph({
            children: [
              new TextRun({
                text: `Analysis Type: Core 5 Competitive Analysis`
              })
            ],
            spacing: { after: 400 }
          }),
          
          // Executive Summary
          new Paragraph({
            children: [
              new TextRun({
                text: "Executive Summary",
                underline: {
                  type: UnderlineType.SINGLE
                }
              })
            ],
            spacing: { after: 300 }
          }),
          
          new Paragraph({
            children: [
              new TextRun({
                text: `This analysis examines ${products.length} competing products in the market to identify opportunities for new product development and competitive positioning. The analysis covers pricing, shipping, reviews, ratings, images, and features to provide actionable insights for market entry strategy.`
              })
            ],
            spacing: { after: 300 }
          }),
          
          // Competitor Overview
          new Paragraph({
            children: [
              new TextRun({
                text: "Competitor Overview",
                underline: {
                  type: UnderlineType.SINGLE
                },
                bold: true
              })
            ],
            spacing: { after: 400 }
          }),
          
          // Competitor sections
          ...products.flatMap((product, index) => {
            const calculation = calculations.find(c => c.productId === product.id)!;
            return generateCompetitorSection(
              `Competitor ${index + 1}`,
              product,
              calculation,
              pollResults
            );
          }),
          
          // Market Opportunities Section
          new Paragraph({
            children: [
              new TextRun({
                text: "Market Opportunities & Strategic Recommendations",
                underline: {
                  type: UnderlineType.SINGLE
                },
                bold: true
              })
            ],
            spacing: { after: 500 }
          }),
          
          // Parse and format the market analysis
          ...formatMarketAnalysis(marketAnalysis)
        ]
      }
    ]
  });
  
  // Convert to buffer
  const buffer = await Packer.toBuffer(doc);
  const uint8Array = new Uint8Array(buffer);
  const result = uint8Array.buffer.slice(uint8Array.byteOffset, uint8Array.byteOffset + uint8Array.byteLength);
  
  return result;
}

/**
 * Generate a competitor section with analysis data
 */
function generateCompetitorSection(
  title: string,
  product: Product,
  calculation: ScoreCalculation,
  pollResults: {
    mainImage: PollResult | null;
    imageStack: PollResult | null;
    features: PollResult | null;
  }
): Paragraph[] {
  // Get rankings from poll results
  const mainImageRank = pollResults.mainImage?.rankings.find(r => r.productId === product.id)?.rank || 6;
  const stackRank = pollResults.imageStack?.rankings.find(r => r.productId === product.id)?.rank || 6;
  const featuresRank = pollResults.features?.rankings.find(r => r.productId === product.id)?.rank || 6;
  
  return [
    // Section Header with Underline
    new Paragraph({
      children: [
        new TextRun({
          text: title,
          underline: {
            type: UnderlineType.SINGLE
          }
        })
      ],
      spacing: { after: 300 }
    }),
    
    // ASIN
    new Paragraph({
      children: [
        new TextRun({
          text: `ASIN: ${product.asin}`
        })
      ],
      spacing: { after: 300 }
    }),
    
    // Product Name
    new Paragraph({
      children: [
        new TextRun({
          text: `Product: ${product.name}`
        })
      ],
      spacing: { after: 300 }
    }),
    
    // 1. Price
    new Paragraph({
      children: [
        new TextRun({
          text: `Price: $${product.price.toFixed(2)}`
        })
      ],
      spacing: { after: 200 }
    }),
    
    // 2. Shipping
    new Paragraph({
      children: [
        new TextRun({
          text: `Shipping: ${product.shippingDays} days`
        })
      ],
      spacing: { after: 200 }
    }),
    
    // 3. Reviews
    new Paragraph({
      children: [
        new TextRun({
          text: `Reviews: ${product.reviewCount.toLocaleString()}`
        })
      ],
      spacing: { after: 200 }
    }),
    
    // 4. Rating
    new Paragraph({
      children: [
        new TextRun({
          text: `Rating: ${product.rating.toFixed(1)} stars`
        })
      ],
      spacing: { after: 200 }
    }),
    
    // 5. Images
    new Paragraph({
      children: [
        new TextRun({
          text: `Images: Main ranked #${mainImageRank}, Stack ranked #${stackRank}`
        })
      ],
      spacing: { after: 200 }
    }),
    
    // 6. Features
    new Paragraph({
      children: [
        new TextRun({
          text: `Features: Ranked #${featuresRank}`
        })
      ],
      spacing: { after: 300 }
    }),
    
    // Score
    new Paragraph({
      children: [
        new TextRun({
          text: `Competitive Score: ${calculation.totalScore}/130`,
          bold: true
        })
      ],
      spacing: { after: 300 }
    }),
    
    // Analysis
    new Paragraph({
      children: [
        new TextRun({
          text: `Market Position: ${generateCompetitorAnalysis(product, calculation)}`
        })
      ],
      spacing: { after: 400 }
    })
  ];
}

/**
 * Generate competitor analysis paragraph
 */
function generateCompetitorAnalysis(
  product: Product,
  calculation: ScoreCalculation
): string {
  const parts: string[] = [];
  
  // Calculate rank based on total score
  // For now, let's use a simpler approach
  const isHighPerformer = calculation.totalScore >= 100;
  const isAveragePerformer = calculation.totalScore >= 80;
  
  if (isHighPerformer) {
    parts.push("Market leader with strong overall performance.");
  } else if (isAveragePerformer) {
    parts.push("Strong competitor with above-average performance.");
  } else {
    parts.push("Average to below-average market position.");
  }
  
  // Strengths
  const strengths: string[] = [];
  if (calculation.priceScore >= 8) strengths.push("competitive pricing");
  if (calculation.shippingScore >= 8) strengths.push("fast shipping");
  if (product.rating >= 4.5) strengths.push("high customer satisfaction");
  if (product.reviewCount > 1000) strengths.push("strong social proof");
  
  if (strengths.length > 0) {
    parts.push(`Key strengths include ${strengths.join(", ")}.`);
  }
  
  // Weaknesses/opportunities
  const weaknesses: string[] = [];
  if (calculation.priceScore < 5) weaknesses.push("pricing may be too high");
  if (calculation.shippingScore < 5) weaknesses.push("slow shipping");
  if (product.rating < 4.0) weaknesses.push("customer satisfaction issues");
  if (product.reviewCount < 100) weaknesses.push("limited market presence");
  
  if (weaknesses.length > 0) {
    parts.push(`Potential vulnerabilities: ${weaknesses.join(", ")}.`);
  }
  
  return parts.join(' ');
}

/**
 * Generate market opportunity analysis using Claude
 */
export async function generateMarketOpportunityAnalysis(
  analysis: Analysis,
  pollResults: {
    mainImage: PollResult | null;
    imageStack: PollResult | null;
    features: PollResult | null;
  }
): Promise<string> {
  const { products, calculations } = analysis;
  
  if (products.length === 0) {
    return "Unable to generate market analysis - no competitor data available.";
  }

  // Sort products by total score to identify market leaders and laggards
  const sortedProducts = products.map(product => {
    const calculation = calculations.find(c => c.productId === product.id);
    return { product, calculation, totalScore: calculation?.totalScore || 0 };
  }).sort((a, b) => b.totalScore - a.totalScore);

  const marketLeader = sortedProducts[0];
  const marketLaggard = sortedProducts[sortedProducts.length - 1];
  
  // Calculate price range and gaps
  const prices = products.map(p => p.price);
  const minPrice = Math.min(...prices);
  const maxPrice = Math.max(...prices);
  const avgPrice = prices.reduce((sum, price) => sum + price, 0) / prices.length;
  
  // Calculate rating gaps
  const ratings = products.map(p => p.rating);
  const minRating = Math.min(...ratings);
  const maxRating = Math.max(...ratings);
  
  // Calculate shipping gaps
  const shippingDays = products.map(p => p.shippingDays);
  const minShipping = Math.min(...shippingDays);
  const maxShipping = Math.max(...shippingDays);

  // Calculate detailed competitive metrics
  const priceGaps = calculatePriceGaps(prices);
  const ratingGaps = calculateRatingGaps(ratings);
  const shippingGaps = calculateShippingGaps(shippingDays);
  const reviewGaps = calculateReviewGaps(products.map(p => p.reviewCount));
  const scoreGaps = calculateScoreGaps(calculations);
  
  // Identify specific competitive weaknesses
  const competitiveWeaknesses = identifyCompetitiveWeaknesses(sortedProducts, pollResults);
  const marketOpportunities = identifyMarketOpportunities(sortedProducts, priceGaps, ratingGaps, shippingGaps);
  
  const prompt = `You are an expert Amazon market analyst and competitive intelligence specialist. Analyze this competitive landscape and provide COMPREHENSIVE, DATA-DRIVEN market opportunities with specific strategic recommendations for market entry and competitive positioning.

COMPETITIVE LANDSCAPE ANALYSIS:
${sortedProducts.map((item, idx) => {
  const { product, calculation } = item;
  const rank = idx + 1;
  const priceVsAvg = product.price - avgPrice;
  const ratingVsMax = product.rating - maxRating;
  const shippingVsMin = product.shippingDays - minShipping;
  
  return `
${rank}. ${product.name} (ASIN: ${product.asin})
   - Price: $${product.price} (${priceVsAvg > 0 ? `+$${priceVsAvg.toFixed(2)} above` : `$${Math.abs(priceVsAvg).toFixed(2)} below`} average)
   - Shipping: ${product.shippingDays} days (${shippingVsMin > 0 ? `+${shippingVsMin} days slower` : 'fastest'} than fastest)
   - Rating: ${product.rating}/5 stars (${ratingVsMax < 0 ? `${Math.abs(ratingVsMax).toFixed(1)} stars below` : 'matches'} highest)
   - Reviews: ${product.reviewCount.toLocaleString()} reviews
   - Competitive Score: ${calculation?.totalScore || 0}/130 (Rank #${rank})
   - Price Score: ${calculation?.priceScore || 0}/20, Shipping Score: ${calculation?.shippingScore || 0}/20
   - Review Score: ${calculation?.reviewScore || 0}/20, Rating Score: ${calculation?.ratingScore || 0}/20
   - Image Score: ${calculation?.mainImageScore || 0}/20, Features Score: ${calculation?.featuresScore || 0}/30
   - Key Features: ${product.features.substring(0, 300)}...
`;
}).join('')}

DETAILED MARKET GAP ANALYSIS:
${priceGaps.map(gap => `- Price Gap: ${gap.description}`).join('\n')}
${ratingGaps.map(gap => `- Rating Gap: ${gap.description}`).join('\n')}
${shippingGaps.map(gap => `- Shipping Gap: ${gap.description}`).join('\n')}
${reviewGaps.map(gap => `- Review Gap: ${gap.description}`).join('\n')}
${scoreGaps.map(gap => `- Score Gap: ${gap.description}`).join('\n')}

COMPETITIVE WEAKNESSES IDENTIFIED:
${competitiveWeaknesses.map(weakness => `- ${weakness.category}: ${weakness.description} (Impact: ${weakness.impact})`).join('\n')}

MARKET OPPORTUNITIES IDENTIFIED:
${marketOpportunities.map(opportunity => `- ${opportunity.type}: ${opportunity.description} (Potential: ${opportunity.potential})`).join('\n')}

CONSUMER PREFERENCE INSIGHTS:
Main Image Performance:
${pollResults.mainImage?.rankings.map(r => {
  const product = products.find(p => p.id === r.productId);
  const score = calculations.find(c => c.productId === r.productId)?.mainImageScore || 0;
  return `- ${product?.name || 'Unknown'}: ${r.percentage}% preference (Score: ${score}/20, Rank #${r.rank})`;
}).join('\n') || 'No main image poll data'}

Image Stack Performance:
${pollResults.imageStack?.rankings.map(r => {
  const product = products.find(p => p.id === r.productId);
  const score = calculations.find(c => c.productId === r.productId)?.imageStackScore || 0;
  return `- ${product?.name || 'Unknown'}: ${r.percentage}% preference (Score: ${score}/20, Rank #${r.rank})`;
}).join('\n') || 'No image stack poll data'}

Feature Performance:
${pollResults.features?.rankings.map(r => {
  const product = products.find(p => p.id === r.productId);
  const score = calculations.find(c => c.productId === r.productId)?.featuresScore || 0;
  return `- ${product?.name || 'Unknown'}: ${r.percentage}% preference (Score: ${score}/30, Rank #${r.rank})`;
}).join('\n') || 'No features poll data'}

ANALYSIS REQUIREMENTS:
Provide COMPREHENSIVE, STRATEGIC analysis based on the exact data above. Include:

1. MARKET OPPORTUNITY ANALYSIS:
   - Identify specific price point gaps and positioning opportunities
   - Analyze rating gaps and customer satisfaction opportunities  
   - Highlight shipping time gaps and delivery advantages
   - Reference specific competitive weaknesses and how to exploit them
   - Use exact ASINs, scores, and percentages from the data

2. COMPETITIVE GAP ANALYSIS:
   - Identify the biggest competitive gaps (score differences, price gaps, rating gaps)
   - Analyze which competitors are most vulnerable to disruption
   - Identify specific features or aspects where competitors are weak
   - Reference specific poll results and consumer preferences

3. STRATEGIC POSITIONING RECOMMENDATIONS:
   - Specific price positioning based on identified gaps
   - Feature development priorities based on competitive weaknesses
   - Shipping and delivery strategy based on market gaps
   - Image and presentation strategy based on poll results

4. MARKET ENTRY STRATEGY:
   - How to position against the market leader (${sortedProducts[0].product.name})
   - How to exploit weaknesses in the lowest-scoring competitor
   - Specific competitive advantages to develop
   - Market positioning strategy based on identified gaps

5. ACTIONABLE IMPLEMENTATION PLAN:
   - Specific price points to test based on market gaps
   - Exact shipping targets based on competitive analysis
   - Feature priorities based on poll results and competitive gaps
   - Image strategy based on consumer preference data

Format your response as:
MARKET OPPORTUNITY ANALYSIS:
[Comprehensive analysis of market gaps and opportunities with specific data references]

COMPETITIVE GAP ANALYSIS:
[Detailed analysis of competitive weaknesses and opportunities]

STRATEGIC POSITIONING RECOMMENDATIONS:
PRODUCT DEVELOPMENT PRIORITIES:
- [Specific features and improvements based on competitive gaps]

COMPETITIVE POSITIONING STRATEGY:
- [How to position against specific competitors using exact data]

PRICING & SHIPPING STRATEGY:
- [Specific pricing and shipping recommendations based on market gaps]

MARKET ENTRY STRATEGY:
- [Comprehensive strategy for entering this competitive market]

IMPLEMENTATION ROADMAP:
- [Specific, actionable steps with timelines and priorities]`;

  // Check if API key is available
  if (!process.env.ANTHROPIC_API_KEY) {
    console.log('ANTHROPIC_API_KEY not found, using fallback analysis');
    throw new Error('API key not configured');
  }

  try {
    // Use direct Anthropic API call instead of internal endpoint
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': process.env.ANTHROPIC_API_KEY!,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-7-sonnet-20250219',
        max_tokens: 4000,
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ]
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Anthropic API failed: ${response.status} ${errorText}`);
    }

    const result = await response.json();
    
    if (!result.content || !result.content[0] || !result.content[0].text) {
      throw new Error('Invalid response format from Anthropic API');
    }
    
    return result.content[0].text;
  } catch (error) {
    
    // Fallback: Generate specific market analysis based on available data
    const sortedProducts = calculations.sort((a, b) => b.totalScore - a.totalScore);
    const topProduct = sortedProducts[0];
    const bottomProduct = sortedProducts[sortedProducts.length - 1];
    const topProductData = products.find(p => p.id === topProduct.productId);
    const bottomProductData = products.find(p => p.id === bottomProduct.productId);
    
    // Calculate specific market gaps
    const prices = products.map(p => p.price);
    const minPrice = Math.min(...prices);
    const maxPrice = Math.max(...prices);
    const avgPrice = prices.reduce((sum, price) => sum + price, 0) / prices.length;
    
    const ratings = products.map(p => p.rating);
    const minRating = Math.min(...ratings);
    const maxRating = Math.max(...ratings);
    
    const shippingDays = products.map(p => p.shippingDays);
    const minShipping = Math.min(...shippingDays);
    const maxShipping = Math.max(...shippingDays);
    
    if (topProductData && bottomProductData) {
      // Calculate detailed gaps for fallback analysis
      const priceGaps = calculatePriceGaps(prices);
      const ratingGaps = calculateRatingGaps(ratings);
      const shippingGaps = calculateShippingGaps(shippingDays);
      const competitiveWeaknesses = identifyCompetitiveWeaknesses(sortedProducts, pollResults);
      const marketOpportunities = identifyMarketOpportunities(sortedProducts, priceGaps, ratingGaps, shippingGaps);
      
      return `MARKET OPPORTUNITY ANALYSIS:
The competitive analysis reveals significant opportunities in this market. The market leader (${topProductData.name}) scores ${topProduct.totalScore}/130, while the weakest competitor (${bottomProductData.name}) scores only ${bottomProduct.totalScore}/130, creating a ${topProduct.totalScore - bottomProduct.totalScore}-point competitive gap. Price analysis shows a range from $${minPrice.toFixed(2)} to $${maxPrice.toFixed(2)} (average: $${avgPrice.toFixed(2)}), with rating gaps from ${minRating} to ${maxRating} stars and shipping times ranging from ${minShipping} to ${maxShipping} days.

COMPETITIVE GAP ANALYSIS:
${priceGaps.length > 0 ? `- Price Gaps: ${priceGaps.map(gap => gap.description).join(', ')}` : ''}
${ratingGaps.length > 0 ? `- Rating Gaps: ${ratingGaps.map(gap => gap.description).join(', ')}` : ''}
${shippingGaps.length > 0 ? `- Shipping Gaps: ${shippingGaps.map(gap => gap.description).join(', ')}` : ''}

COMPETITIVE WEAKNESSES IDENTIFIED:
${competitiveWeaknesses.map(w => `- ${w.category}: ${w.description} (Impact: ${w.impact})`).join('\n')}

MARKET OPPORTUNITIES IDENTIFIED:
${marketOpportunities.map(o => `- ${o.type}: ${o.description} (Potential: ${o.potential})`).join('\n')}

STRATEGIC POSITIONING RECOMMENDATIONS:
PRODUCT DEVELOPMENT PRIORITIES:
- Target the ${bottomProduct.totalScore}-point score gap by improving features that scored poorly in the weakest competitor
- Focus on rating improvement from ${minRating} to at least 4.5+ stars to match market leaders
- Address the ${maxShipping - minShipping}-day shipping gap by targeting ${minShipping}-day delivery
- Exploit specific competitive weaknesses: ${competitiveWeaknesses.map(w => w.description).join(', ')}

COMPETITIVE POSITIONING STRATEGY:
- Exploit the ${topProduct.totalScore - bottomProduct.totalScore}-point competitive gap by targeting the weakest competitor's specific weaknesses
- Position between $${avgPrice.toFixed(2)} and $${maxPrice.toFixed(2)} to capture premium market segment
- Target the ${maxRating - minRating}-star rating gap by focusing on customer satisfaction improvements
- Leverage market opportunities: ${marketOpportunities.map(o => o.description).join(', ')}

PRICING & SHIPPING STRATEGY:
- Test pricing between $${avgPrice.toFixed(2)} and $${maxPrice.toFixed(2)} to capture premium positioning
- Target ${minShipping}-day shipping to match the fastest competitor
- Focus on features that address the specific weaknesses of the ${bottomProduct.totalScore}/130 scoring product
- Address identified price gaps: ${priceGaps.length > 0 ? priceGaps.map(gap => gap.description).join(', ') : 'No significant price gaps'}

MARKET ENTRY STRATEGY:
- Target the exact price gap between $${minPrice.toFixed(2)} and $${maxPrice.toFixed(2)} with strategic positioning
- Exploit the ${maxRating - minRating}-star rating gap by focusing on customer satisfaction
- Address the ${maxShipping - minShipping}-day shipping gap with faster delivery options
- Capitalize on market opportunities: ${marketOpportunities.map(o => o.description).join(', ')}

IMPLEMENTATION ROADMAP:
- Phase 1: Address critical weaknesses (${competitiveWeaknesses.filter(w => w.impact === 'Critical').map(w => w.category).join(', ')})
- Phase 2: Exploit high-potential opportunities (${marketOpportunities.filter(o => o.potential === 'High').map(o => o.type).join(', ')})
- Phase 3: Optimize pricing and shipping based on identified gaps
- Phase 4: Monitor competitive response and adjust strategy accordingly`;
    }
    
    // Enhanced fallback analysis when API is not available
    const sortedProducts = analysis.calculations.sort((a, b) => b.totalScore - a.totalScore);
    const topProduct = sortedProducts[0];
    const bottomProduct = sortedProducts[sortedProducts.length - 1];
    const topProductData = analysis.products.find(p => p.id === topProduct.productId);
    const bottomProductData = analysis.products.find(p => p.id === bottomProduct.productId);
    
    return `MARKET OPPORTUNITY ANALYSIS

COMPETITIVE LANDSCAPE OVERVIEW:
Based on the analysis of ${analysis.products.length} products, we've identified key market opportunities and competitive gaps.

TOP PERFORMER ANALYSIS:
- Highest scoring product: ${topProductData?.asin || topProduct.productId} (Score: ${topProduct.totalScore}/50)
- Key strengths: Price optimization, shipping efficiency, review management
- Market position: Strong competitive advantage

BOTTOM PERFORMER ANALYSIS:
- Lowest scoring product: ${bottomProductData?.asin || bottomProduct.productId} (Score: ${bottomProduct.totalScore}/50)
- Key weaknesses: Pricing strategy, shipping times, review management
- Improvement opportunities: Significant potential for optimization

STRATEGIC RECOMMENDATIONS:
1. PRICING STRATEGY: Analyze top performer's pricing model and implement competitive pricing
2. SHIPPING OPTIMIZATION: Reduce shipping times to match or beat top performers
3. REVIEW MANAGEMENT: Implement strategies to improve review scores and volume
4. COMPETITIVE POSITIONING: Focus on areas where competitors are weakest

IMPLEMENTATION ROADMAP:
- Phase 1: Immediate pricing adjustments based on top performer analysis
- Phase 2: Shipping optimization and logistics improvements
- Phase 3: Review and rating enhancement strategies
- Phase 4: Continuous monitoring and competitive response

Note: This analysis is based on available data. For more detailed AI-powered insights, please configure your Anthropic API key.`;
  }
}

/**
 * Create a bullet point paragraph
 */
function createBulletPoint(text: string): Paragraph {
  return new Paragraph({
    children: [
      new TextRun({
        text: text
      })
    ],
    spacing: { after: 200 },
    bullet: {
      level: 0
    }
  });
}

/**
 * Format market analysis into Word paragraphs
 */
function formatMarketAnalysis(analysis: string): Paragraph[] {
  const paragraphs: Paragraph[] = [];
  
  // Split the analysis into sections
  const sections = analysis.split(/\n(?=MARKET OPPORTUNITY ANALYSIS:|STRATEGIC RECOMMENDATIONS:|PRODUCT DEVELOPMENT PRIORITIES:|COMPETITIVE POSITIONING:|PRICING & SHIPPING STRATEGY:|MARKET ENTRY STRATEGY:)/);
  
  for (const section of sections) {
    const trimmedSection = section.trim();
    
    if (trimmedSection.startsWith('MARKET OPPORTUNITY ANALYSIS:')) {
      const content = trimmedSection.replace('MARKET OPPORTUNITY ANALYSIS:', '').trim();
      if (content) {
        // Split content into paragraphs for better readability
        const contentParagraphs = content.split('\n\n').filter(p => p.trim());
        for (const paragraph of contentParagraphs) {
          paragraphs.push(
            new Paragraph({
              children: [
                new TextRun({
                  text: paragraph.trim()
                })
              ],
              spacing: { after: 400 }
            })
          );
        }
      }
    } else if (trimmedSection.startsWith('STRATEGIC RECOMMENDATIONS:')) {
      // Skip the header, we'll handle the subsections separately
      continue;
    } else if (trimmedSection.startsWith('PRODUCT DEVELOPMENT PRIORITIES:')) {
      paragraphs.push(
        new Paragraph({
          children: [
            new TextRun({
              text: "PRODUCT DEVELOPMENT PRIORITIES:",
              bold: true
            })
          ],
          spacing: { after: 300 }
        })
      );
      
      const content = trimmedSection.replace('PRODUCT DEVELOPMENT PRIORITIES:', '').trim();
      const items = content.split('\n').filter(line => line.trim().startsWith('-'));
      
      for (const item of items) {
        // Remove the dash and format as proper bullet point
        const cleanItem = item.trim().replace(/^-\s*/, '');
        paragraphs.push(createBulletPoint(cleanItem));
      }
    } else if (trimmedSection.startsWith('COMPETITIVE POSITIONING:')) {
      paragraphs.push(
        new Paragraph({
          children: [
            new TextRun({
              text: "COMPETITIVE POSITIONING:",
              bold: true
            })
          ],
          spacing: { after: 300 }
        })
      );
      
      const content = trimmedSection.replace('COMPETITIVE POSITIONING:', '').trim();
      const items = content.split('\n').filter(line => line.trim().startsWith('-'));
      
      for (const item of items) {
        // Remove the dash and format as proper bullet point
        const cleanItem = item.trim().replace(/^-\s*/, '');
        paragraphs.push(createBulletPoint(cleanItem));
      }
    } else if (trimmedSection.startsWith('PRICING & SHIPPING STRATEGY:')) {
      paragraphs.push(
        new Paragraph({
          children: [
            new TextRun({
              text: "PRICING & SHIPPING STRATEGY:",
              bold: true
            })
          ],
          spacing: { after: 300 }
        })
      );
      
      const content = trimmedSection.replace('PRICING & SHIPPING STRATEGY:', '').trim();
      const items = content.split('\n').filter(line => line.trim().startsWith('-'));
      
      for (const item of items) {
        // Remove the dash and format as proper bullet point
        const cleanItem = item.trim().replace(/^-\s*/, '');
        paragraphs.push(createBulletPoint(cleanItem));
      }
    } else if (trimmedSection.startsWith('MARKET ENTRY STRATEGY:')) {
      paragraphs.push(
        new Paragraph({
          children: [
            new TextRun({
              text: "MARKET ENTRY STRATEGY:",
              bold: true
            })
          ],
          spacing: { after: 300 }
        })
      );
      
      const content = trimmedSection.replace('MARKET ENTRY STRATEGY:', '').trim();
      const items = content.split('\n').filter(line => line.trim().startsWith('-'));
      
      for (const item of items) {
        // Remove the dash and format as proper bullet point
        const cleanItem = item.trim().replace(/^-\s*/, '');
        paragraphs.push(createBulletPoint(cleanItem));
      }
    }
  }
  
  // If no sections were found, just add the raw text
  if (paragraphs.length === 0) {
    paragraphs.push(
      new Paragraph({
        children: [
          new TextRun({
            text: analysis
          })
        ],
        spacing: { after: 300 }
      })
    );
  }
  
  return paragraphs;
}

/**
 * Generate filename for Core 5 analysis report
 */
export function generateCore5AnalysisFilename(analysis: Analysis): string {
  const asins = analysis.products.map(p => p.asin).join('_');
  return `Core 5 Market Analysis - ${asins}.docx`;
}
